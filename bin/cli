#!/usr/bin/env php
<?php

declare(strict_types=1);

use Psr\Log\LoggerInterface;
use Symfony\Component\Dotenv\Dotenv;
use Waglpz\Cli\CliExceptionHandler;

use function Waglpz\Cli\cliExecutorName;

if (\is_file(__DIR__.'/../vendor/autoload.php')) {
    $dir = __DIR__;
} else {
    $dir = \dirname(__FILE__, 4);
}
include_once $dir.'/../vendor/autoload.php';

\define('PROJECT_CONFIG_DIRECTORY', \dirname($dir).'/config');

(new Dotenv())->bootEnv($dir.'/../.env');

/* phpcs:disable */
if (! \defined('APP_ENV')) {
    \define('APP_ENV', $_SERVER['APP_ENV'] ?: 'dev');
}
/* phpcs:enable */

$config = include \PROJECT_CONFIG_DIRECTORY.'/cli.php';

\restore_error_handler();
\restore_exception_handler();

if (isset($config['exception_handler'])) {
    // PHP stan check accepts this block only when anonymous function returns boolean.
    \set_error_handler(
        static function ($errorCode, string $errorMessage): bool {
            throw new \Error($errorMessage, 500);
        }
    );

    $exceptionHandlerClass = $config['exception_handler'];
    $logErrorsDir          = $config['logErrorsDir'] ?? null;
    $exceptionHandler      = new $exceptionHandlerClass($logErrorsDir);
    if (! $exceptionHandler instanceof CliExceptionHandler) {
        throw new \InvalidArgumentException(
            \sprintf(
                'Ung√ºltige Exception Handler Class, erwartet "%s"',
                CliExceptionHandler::class
            )
        );
    }

    \set_exception_handler($exceptionHandler);
}

$usage = static function (array $config) {
    $context = cliExecutorName();
    echo \PHP_EOL;
    echo 'Usage:';
    echo \PHP_EOL;
    echo $context.\implode(\PHP_EOL.$context, \array_keys($config['commands']));
    echo \PHP_EOL;
    exit(1);
};

if ($_SERVER['argc'] < 2) {
    $usage($config);
}
$arguments = $_SERVER['argv'];

\array_shift($arguments);

$quite = false;
$command = null;          ;
foreach ($arguments as $argument) {
    if (\strcasecmp(':q', $argument) === 0 || \strcasecmp(':quit', $argument) === 0) {
        $quite = true;

        continue;
    }

    if(isset($config['commands'][$argument])) {
        $command = $argument;
    }
}

if ($command === null) {
    $usage($config);
}

$prependWarn    = $quite ? '' : \PHP_EOL.'[!] ';
$prependSuccess = $quite ? '' : \PHP_EOL.'[+] ';
$append         = $quite ? '' : \PHP_EOL.\PHP_EOL;

$commandExecutorClass = $config['commands'][$command]['executor'];

$container = \Waglpz\DiContainer\container();
$logger = $container->get('$DefaultLogger');
\assert($logger instanceof LoggerInterface);

try {
    $executor = $container->get($commandExecutorClass);

    echo $prependSuccess.($executor)();
} catch (\Throwable $exception) {
    $logger->error($exception->getMessage(), ['code' => $exception->getCode()]);
    echo $prependWarn.$exception->getMessage();
    echo $append === '' ? \PHP_EOL . \PHP_EOL : $append;
    exit(1);
}
